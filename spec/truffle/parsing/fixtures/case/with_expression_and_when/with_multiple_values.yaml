subject: "case expression"
description: "with expression to match / and multiple values in a `when` branch (case exp when a, b ... end)"
notes: >
  A list of values in a `when` expression is implemented as `if` operator
  to compare each value in a list.
  
  So the example below is translated to the following expression:
  
    %case_1 = 42
    if 42 === %case_1 || 42.0 === %case_1
      "forty two"
    else
      nil
    end
yarp_specific: true # Simplified AST and removed duplication of `when`'s body for each `when`'s condition
focused_on_node: "org.truffleruby.language.control.SequenceNode"
ruby: |
  case 42
  when 42, 42.0
    "forty two"
  end
ast: |
  SequenceNode
      attributes:
          flags = 12
      children:
          body = [
              WriteLocalVariableNode
                  attributes:
                      flags = 0
                      frameSlot = 0 # (self)
                  children:
                      valueNode =
                          ProfileArgumentNodeGen
                              attributes:
                                  flags = 0
                              children:
                                  childNode_ =
                                      ReadSelfNode
                                          attributes:
                                              flags = 0
              WriteLocalVariableNode
                  attributes:
                      flags = 0
                      frameSlot = 2 # %case_0
                  children:
                      valueNode =
                          IntegerFixnumLiteralNode
                              attributes:
                                  flags = 0
                                  value = 42
              IfElseNodeGen
                  attributes:
                      flags = 0
                  children:
                      condition =
                          OrNodeGen
                              attributes:
                                  flags = 0
                              children:
                                  left =
                                      InlinedCaseEqualNodeGen
                                          attributes:
                                              assumptions = [Assumption(valid, name=set_trace_func is not used)]
                                              flags = 0
                                              integerCaseEqualAssumption = Assumption(valid, name=inlined Integer#===)
                                              parameters = org.truffleruby.language.dispatch.RubyCallNodeParameters@...
                                          children:
                                              leftNode_ =
                                                  IntegerFixnumLiteralNode
                                                      attributes:
                                                          flags = 0
                                                          value = 42
                                              rightNode_ =
                                                  ReadLocalVariableNode
                                                      attributes:
                                                          flags = 0
                                                          frameSlot = 2 # %case_0
                                                          type = FRAME_LOCAL
                                  right =
                                      InlinedCaseEqualNodeGen
                                          attributes:
                                              assumptions = [Assumption(valid, name=set_trace_func is not used)]
                                              flags = 0
                                              integerCaseEqualAssumption = Assumption(valid, name=inlined Integer#===)
                                              parameters = org.truffleruby.language.dispatch.RubyCallNodeParameters@...
                                          children:
                                              leftNode_ =
                                                  FloatLiteralNode
                                                      attributes:
                                                          flags = 0
                                                          value = 42.0
                                              rightNode_ =
                                                  ReadLocalVariableNode
                                                      attributes:
                                                          flags = 0
                                                          frameSlot = 2 # %case_0
                                                          type = FRAME_LOCAL
                      elseBody =
                          NilLiteralNode
                              attributes:
                                  flags = 0
                      thenBody =
                          StringLiteralNode
                              attributes:
                                  encoding = UTF-8
                                  flags = 1
                                  tstring = forty two
          ]