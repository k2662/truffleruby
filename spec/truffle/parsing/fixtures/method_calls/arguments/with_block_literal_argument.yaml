subject: "Method call"
description: "Arguments/with block literal argument"
notes: |
  Is wrapped into CatchBreakNode/FrameOnStackNode nodes and
  block is represented with BlockDefinitionNode node.
focused_on_node: "org.truffleruby.language.methods.CatchBreakNode"
ruby: |
  foo { }
ast: |
  CatchBreakNode
      attributes:
          breakID = org.truffleruby.language.control.BreakID@...
          flags = 1
          isWhile = false
      children:
          body =
              FrameOnStackNode
                  attributes:
                      flags = 0
                      frameOnStackMarkerSlot = 2
                  children:
                      child =
                          RubyCallNode
                              attributes:
                                  descriptor = org.truffleruby.language.arguments.NoKeywordArgumentsDescriptor@...
                                  dispatchConfig = PRIVATE
                                  emptyKeywordsProfile = false
                                  flags = 0
                                  isAttrAssign = false
                                  isSafeNavigation = false
                                  isSplatted = false
                                  isVCall = false
                                  lastArgIsNotHashProfile = false
                                  methodName = "foo"
                                  notEmptyKeywordsProfile = false
                                  notRuby2KeywordsHashProfile = false
                              children:
                                  block =
                                      BlockDefinitionNodeGen
                                          attributes:
                                              breakID = org.truffleruby.language.control.BreakID@...
                                              callTargets = ProcCallTargets(callTargetForProc = block in <top (required)>, callTargetForLambda = null, altCallTargetCompiler = ...$$Lambda$.../0x...@...)
                                              flags = 0
                                              frameOnStackMarkerSlot = 2
                                              sharedMethodInfo = SharedMethodInfo(staticLexicalScope =  :: Object, arity = Arity{preRequired = 0, optional = 0, hasRest = false, postRequired = 0, keywordArguments = [], requiredKeywordArgumentsCount = 0, hasKeywordsRest = false}, originName = block in <top (required)>, blockDepth = 1, parseName = block in <top (required)>, notes = <top (required)>, argumentDescriptors = [])
                                              type = PROC
                                          call targets:
                                              RubyProcRootNode
                                                  attributes:
                                                      callTarget = block in <top (required)>
                                                      frameDescriptor = FrameDescriptor@...{#0:(self)}
                                                      instrumentationBits = 0
                                                      lock = java.util.concurrent.locks.ReentrantLock@...[Unlocked]
                                                      nextProfile = false
                                                      polyglotRef = org.truffleruby.RubyLanguage@...
                                                      redoProfile = false
                                                      retryProfile = false
                                                      returnID = org.truffleruby.language.control.ReturnID@...
                                                      sharedMethodInfo = SharedMethodInfo(staticLexicalScope =  :: Object, arity = Arity{preRequired = 0, optional = 0, hasRest = false, postRequired = 0, keywordArguments = [], requiredKeywordArgumentsCount = 0, hasKeywordsRest = false}, originName = block in <top (required)>, blockDepth = 1, parseName = block in <top (required)>, notes = <top (required)>, argumentDescriptors = [])
                                                      split = HEURISTIC
                                                  children:
                                                      body =
                                                          SequenceNode
                                                              attributes:
                                                                  flags = 12
                                                              children:
                                                                  body = [
                                                                      WriteLocalVariableNode
                                                                          attributes:
                                                                              flags = 0
                                                                              frameSlot = 0 # (self)
                                                                          children:
                                                                              valueNode =
                                                                                  ProfileArgumentNodeGen
                                                                                      attributes:
                                                                                          flags = 0
                                                                                      children:
                                                                                          childNode_ =
                                                                                              ReadSelfNode
                                                                                                  attributes:
                                                                                                      flags = 0
                                                                      NilLiteralNode
                                                                          attributes:
                                                                              flags = 0
                                                                  ]
                                  receiver =
                                      SelfNode
                                          attributes:
                                              flags = 0