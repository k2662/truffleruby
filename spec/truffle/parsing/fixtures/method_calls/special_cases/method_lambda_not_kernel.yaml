subject: "Method call"
description: "Special cases/method #lambda (not Kernel#lambda)"
notes: >
  Convert lambda call target to a proc call target with LambdaToProcNode node.
  
  The argument here makes us suspect it's not Kernel#lambda.
  
  Ignore outer wrappers CatchBreakNode and FrameOnStackNode for clarity.
  Otherwise it should be focused on the following node:
    focused_on_node: "org.truffleruby.language.methods.CatchBreakNode"
focused_on_node: "org.truffleruby.language.dispatch.RubyCallNode"
ruby: |
  lambda(1) { }
ast: |
  RubyCallNode
      attributes:
          descriptor = org.truffleruby.language.arguments.NoKeywordArgumentsDescriptor@...
          dispatchConfig = PRIVATE
          emptyKeywordsProfile = false
          flags = 0
          isAttrAssign = false
          isSafeNavigation = false
          isSplatted = false
          isVCall = false
          lastArgIsNotHashProfile = false
          methodName = "lambda"
          notEmptyKeywordsProfile = false
          notRuby2KeywordsHashProfile = false
      children:
          arguments = [
              IntegerFixnumLiteralNode
                  attributes:
                      flags = 0
                      value = 1
          ]
          block =
              LambdaToProcNode
                  attributes:
                      flags = 0
                  children:
                      blockNode =
                          BlockDefinitionNodeGen
                              attributes:
                                  breakID = org.truffleruby.language.control.BreakID@...
                                  callTargets = ProcCallTargets(callTargetForProc = null, callTargetForLambda = block in <top (required)>, altCallTargetCompiler = ...$$Lambda$.../0x...@...)
                                  flags = 0
                                  frameOnStackMarkerSlot = -1
                                  sharedMethodInfo = SharedMethodInfo(staticLexicalScope =  :: Object, arity = Arity{preRequired = 0, optional = 0, hasRest = false, postRequired = 0, keywordArguments = [], requiredKeywordArgumentsCount = 0, hasKeywordsRest = false}, originName = block in <top (required)>, blockDepth = 1, parseName = block in <top (required)>, notes = <top (required)>, argumentDescriptors = [])
                                  type = LAMBDA
                              call targets:
                                  RubyLambdaRootNode
                                      attributes:
                                          arityForCheck = Arity{preRequired = 0, optional = 0, hasRest = false, postRequired = 0, keywordArguments = [], requiredKeywordArgumentsCount = 0, hasKeywordsRest = false}
                                          breakID = org.truffleruby.language.control.BreakID@...
                                          callTarget = block in <top (required)>
                                          checkArityProfile = false
                                          frameDescriptor = FrameDescriptor@...{#0:(self)}
                                          instrumentationBits = 0
                                          keywordArguments = false
                                          localReturnProfile = false
                                          lock = java.util.concurrent.locks.ReentrantLock@...[Unlocked]
                                          matchingBreakProfile = false
                                          matchingReturnProfile = false
                                          nextProfile = false
                                          nonMatchingBreakProfile = false
                                          nonMatchingReturnProfile = false
                                          polyglotRef = org.truffleruby.RubyLanguage@...
                                          redoProfile = false
                                          retryProfile = false
                                          returnID = org.truffleruby.language.control.ReturnID@...
                                          sharedMethodInfo = SharedMethodInfo(staticLexicalScope =  :: Object, arity = Arity{preRequired = 0, optional = 0, hasRest = false, postRequired = 0, keywordArguments = [], requiredKeywordArgumentsCount = 0, hasKeywordsRest = false}, originName = block in <top (required)>, blockDepth = 1, parseName = block in <top (required)>, notes = <top (required)>, argumentDescriptors = [])
                                          split = HEURISTIC
                                      children:
                                          body =
                                              SequenceNode
                                                  attributes:
                                                      flags = 12
                                                  children:
                                                      body = [
                                                          WriteLocalVariableNode
                                                              attributes:
                                                                  flags = 0
                                                                  frameSlot = 0 # (self)
                                                              children:
                                                                  valueNode =
                                                                      ProfileArgumentNodeGen
                                                                          attributes:
                                                                              flags = 0
                                                                          children:
                                                                              childNode_ =
                                                                                  ReadSelfNode
                                                                                      attributes:
                                                                                          flags = 0
                                                          NilLiteralNode
                                                              attributes:
                                                                  flags = 0
                                                      ]
          receiver =
              SelfNode
                  attributes:
                      flags = 0