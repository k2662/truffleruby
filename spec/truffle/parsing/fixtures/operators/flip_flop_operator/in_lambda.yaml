subject: "Flip-flop operator"
description: "in a lambda"
notes: >
  An additional node InitFlipFlopSlotNode is created
  in a block's outer (or parent) lexical scope.
focused_on_node: "org.truffleruby.language.methods.LiteralMethodDefinitionNode"
ruby: |
  def foo
    -> do
      x = 42
      1 if (x) .. (x)
    end
  end
ast: |
  LiteralMethodDefinitionNode
      attributes:
          callTargetSupplier = org.truffleruby.language.methods.CachedLazyCallTargetSupplier@...
          flags = 1
          isDefSingleton = false
          name = "foo"
          sharedMethodInfo = SharedMethodInfo(staticLexicalScope =  :: Object, arity = Arity{preRequired = 0, optional = 0, hasRest = false, postRequired = 0, keywordArguments = [], requiredKeywordArgumentsCount = 0, hasKeywordsRest = false}, originName = foo, blockDepth = 0, parseName = Object#foo, notes = null, argumentDescriptors = [])
      call targets:
          RubyMethodRootNode
              attributes:
                  arityForCheck = Arity{preRequired = 0, optional = 0, hasRest = false, postRequired = 0, keywordArguments = [], requiredKeywordArgumentsCount = 0, hasKeywordsRest = false}
                  callTarget = Object#foo
                  checkArityProfile = false
                  frameDescriptor = FrameDescriptor@...{#0:(self), #1:%$~_, #2:%method_block_arg, #3:%flipflop_0}
                  instrumentationBits = 0
                  keywordArguments = false
                  localReturnProfile = false
                  lock = java.util.concurrent.locks.ReentrantLock@...[Unlocked]
                  matchingReturnProfile = false
                  nonMatchingReturnProfile = false
                  polyglotRef = org.truffleruby.RubyLanguage@...
                  retryProfile = false
                  returnID = org.truffleruby.language.control.ReturnID@...
                  sharedMethodInfo = SharedMethodInfo(staticLexicalScope =  :: Object, arity = Arity{preRequired = 0, optional = 0, hasRest = false, postRequired = 0, keywordArguments = [], requiredKeywordArgumentsCount = 0, hasKeywordsRest = false}, originName = foo, blockDepth = 0, parseName = Object#foo, notes = null, argumentDescriptors = [])
                  split = HEURISTIC
              children:
                  body =
                      SequenceNode
                          attributes:
                              flags = 12
                          children:
                              body = [
                                  InitFlipFlopSlotNode
                                      attributes:
                                          flags = 0
                                          frameSlot = 3
                                  WriteLocalVariableNode
                                      attributes:
                                          flags = 0
                                          frameSlot = 0 # (self)
                                      children:
                                          valueNode =
                                              ProfileArgumentNodeGen
                                                  attributes:
                                                      flags = 0
                                                  children:
                                                      childNode_ =
                                                          ReadSelfNode
                                                              attributes:
                                                                  flags = 0
                                  SaveMethodBlockNode
                                      attributes:
                                          flags = 0
                                          slot = 2
                                  BlockDefinitionNodeGen
                                      attributes:
                                          breakID = org.truffleruby.language.control.BreakID@...
                                          callTargets = ProcCallTargets(callTargetForProc = null, callTargetForLambda = block in Object#foo, altCallTargetCompiler = null)
                                          flags = 1
                                          frameOnStackMarkerSlot = -1
                                          sharedMethodInfo = SharedMethodInfo(staticLexicalScope =  :: Object, arity = Arity{preRequired = 0, optional = 0, hasRest = false, postRequired = 0, keywordArguments = [], requiredKeywordArgumentsCount = 0, hasKeywordsRest = false}, originName = block in foo, blockDepth = 1, parseName = block in Object#foo, notes = foo, argumentDescriptors = [])
                                          type = LAMBDA
                                      call targets:
                                          RubyLambdaRootNode
                                              attributes:
                                                  arityForCheck = Arity{preRequired = 0, optional = 0, hasRest = false, postRequired = 0, keywordArguments = [], requiredKeywordArgumentsCount = 0, hasKeywordsRest = false}
                                                  breakID = org.truffleruby.language.control.BreakID@...
                                                  callTarget = block in Object#foo
                                                  checkArityProfile = false
                                                  frameDescriptor = FrameDescriptor@...{#0:(self), #1:x}
                                                  instrumentationBits = 0
                                                  keywordArguments = false
                                                  localReturnProfile = false
                                                  lock = java.util.concurrent.locks.ReentrantLock@...[Unlocked]
                                                  matchingBreakProfile = false
                                                  matchingReturnProfile = false
                                                  nextProfile = false
                                                  nonMatchingBreakProfile = false
                                                  nonMatchingReturnProfile = false
                                                  polyglotRef = org.truffleruby.RubyLanguage@...
                                                  redoProfile = false
                                                  retryProfile = false
                                                  returnID = org.truffleruby.language.control.ReturnID@...
                                                  sharedMethodInfo = SharedMethodInfo(staticLexicalScope =  :: Object, arity = Arity{preRequired = 0, optional = 0, hasRest = false, postRequired = 0, keywordArguments = [], requiredKeywordArgumentsCount = 0, hasKeywordsRest = false}, originName = block in foo, blockDepth = 1, parseName = block in Object#foo, notes = foo, argumentDescriptors = [])
                                                  split = HEURISTIC
                                              children:
                                                  body =
                                                      SequenceNode
                                                          attributes:
                                                              flags = 12
                                                          children:
                                                              body = [
                                                                  WriteLocalVariableNode
                                                                      attributes:
                                                                          flags = 0
                                                                          frameSlot = 0 # (self)
                                                                      children:
                                                                          valueNode =
                                                                              ProfileArgumentNodeGen
                                                                                  attributes:
                                                                                      flags = 0
                                                                                  children:
                                                                                      childNode_ =
                                                                                          ReadSelfNode
                                                                                              attributes:
                                                                                                  flags = 0
                                                                  WriteLocalVariableNode
                                                                      attributes:
                                                                          flags = 1
                                                                          frameSlot = 1 # x
                                                                      children:
                                                                          valueNode =
                                                                              IntegerFixnumLiteralNode
                                                                                  attributes:
                                                                                      flags = 0
                                                                                      value = 42
                                                                  IfNodeGen
                                                                      attributes:
                                                                          flags = 0
                                                                      children:
                                                                          condition =
                                                                              FlipFlopNodeGen
                                                                                  attributes:
                                                                                      exclusive = false
                                                                                      flags = 1
                                                                                      frameLevel = 1
                                                                                      frameSlot = 3
                                                                                  children:
                                                                                      begin =
                                                                                          ReadLocalVariableNode
                                                                                              attributes:
                                                                                                  flags = 0
                                                                                                  frameSlot = 1 # x
                                                                                                  type = FRAME_LOCAL
                                                                                      end =
                                                                                          ReadLocalVariableNode
                                                                                              attributes:
                                                                                                  flags = 0
                                                                                                  frameSlot = 1 # x
                                                                                                  type = FRAME_LOCAL
                                                                          thenBody =
                                                                              IntegerFixnumLiteralNode
                                                                                  attributes:
                                                                                      flags = 0
                                                                                      value = 1
                                                              ]
                              ]