#!/usr/bin/env ruby
require 'backtraces'
abort "This test's expected output assumes not using --cexts-sulong" if Truffle::Boot.get_option('cexts-sulong')
TEST_DIR = File.expand_path("../..", __FILE__)
SRC_DIR = File.expand_path("../../../../../..", __FILE__)

def puts_backtrace(backtrace)
  puts backtrace.gsub(Truffle::Boot.ruby_home, '').gsub(TEST_DIR, '').gsub(SRC_DIR, '')
                .gsub(%r{(/cext\.rb|/cext_ruby\.rb|/c/cext/\w+\.c|/qsort\.c|<internal:core> .+\.rb):(\d+:)?}, '\1:n:')
                .gsub(%r{.+/qsort\.c:n:in `(?!qsort)\w+'\n}, '')
end

puts "Test error in Ruby => C ext support => Ruby"
RB_FUNCALLV = Truffle::CExt::LIBTRUFFLERUBY[:rb_funcallv]

def callback
  raise 'Ruby callback error'
end

def ruby_call
  RB_FUNCALLV.call(Truffle::CExt.test_cext_wrap(self), Truffle::CExt.test_cext_wrap(:callback), 0, [])
end

def top
  ruby_call
end

begin
  top
rescue => e
  puts_backtrace e.full_message(order: :top, highlight: false)
end


puts
puts "Test with an internal error from rb_mutex_lock()"
LOCK = Mutex.new
RB_MUTEX_LOCK = Truffle::CExt::LIBTRUFFLERUBY[:rb_mutex_lock]

LOCK.lock

def double_lock
  RB_MUTEX_LOCK.call(Truffle::CExt.test_cext_wrap(LOCK))
end

begin
  double_lock
rescue => e
  puts_backtrace e.full_message(order: :top, highlight: false)
end


puts
puts "Test error in Ruby => C ext => Ruby => C ext Proc => Ruby"
class Bar
  def bar(baz)
    baz.call(proc { raise 'error' })
  end
end

begin
  Backtraces.foo(Bar.new)
rescue => e
  puts_backtrace e.full_message(order: :top, highlight: false)
end


puts
puts "Test error in the callback to the Sulong-instrinsified qsort()"
p Backtraces.qsort(-> a, b { a <=> b })

begin
  Backtraces.qsort(-> a, b {
    raise "error from Ruby called from instrinsified qsort()"
  })
rescue => e
  puts_backtrace e.full_message(order: :top, highlight: false)
end


puts
puts "Test error in callback from a native function"
p Backtraces.native_callback(-> { 6*7 })

def error_helper
  raise "error from Ruby called from Sulong called from native callback"
end

begin
  p Backtraces.native_callback(-> {
    error_helper
  })
rescue RuntimeError => e
  puts_backtrace e.full_message(order: :top, highlight: false)
end
